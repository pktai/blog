function sockMerchant(n, ar) {
    let res = 0;
    for (let i = 0; i < n; i++) {
        ar.shift();
        let getIndex = ar.indexOf(ar[0]);

        if (getIndex > -1) {
            ar.splice(getIndex, 1);
            res = res         + 1;
        }
        if (ar.length === 0) {
            return res;
        }
    }
}


console.log(sockMerchant(15, [6, 5, 2, 3, 5, 2, 2, 1, 1, 5, 1, 3, 3, 3, 5]));

//===============================================================================

function checkArr(prices, k) {
  let sortArr = prices.sort((a, b) => a - b);
  let res = 0;
  let i = 0;
  sortArr.map(item => {
    if(res <= k) {
        res = res + item;
        if(res > k) {
          return i;
        }
        i = i + 1;
    }
  });
  return i;
}


function checkArr(prices, k) {
  // console.log(prices);
  // console.log(a);
  let result = 0;
  let median =[];
  let min = 0;
  let max = 0;
  let mid = 0;
  for(let i = 0; i <= prices.length - k; i ++) {
    let nexValue = prices[k+i];
    let res = prices.slice(i, k+i);
    if(nexValue == undefined) {
      return result;
    };

    if(nexValue < mid && nexValue >= min ) {
        console.log("min", min);
      result = result + 1;
    }
    else {
      median= findMedian(res);
      min = median[0];
      mid = median[1];
      max = median[2];
       if(nexValue >= (2* median[1])) {
                 console.log("median", median[1]);
      console.log("next value", nexValue);
       result = result + 1;
     }
    }
  }
  return result;
}

function findMedian(arr) {
  const mid = Math.floor(arr.length / 2),
    nums = [...arr].sort((a, b) => a - b);
    if(arr.length % 2 !== 0) {
      return [nums[0], nums[mid], nums[nums.length - 1]];
    }
    else {
      return [nums[0],((nums[mid - 1] + nums[mid]) / 2), nums[nums.length - 1]]; 
    }
};
